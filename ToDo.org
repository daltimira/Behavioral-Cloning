DIJOUS

DONE - Set up local environment.
- Run local simulator and generate some image data

DONE - Implement code that is able to load data and split the data in training and  validation (see traffic project and notes of behavioral project).
- See notes.txt to read the csv file for reading images.

DONE- Implement a basic model that is trained with few images and is able to predict the steering angle from these images. And that this model can be loaded for testing (with autonomous mode).

DIVENDRES

DONE - Implement method to validate the model and get some results (check the notes.txt).
- Output training and validation loss metrics (see notes.txt).

DONE- Implement pre-processing of the image data (see the notes.txt)
- Image resize by 2.
DONE Convert to gray scale.
DONE Crop.
DONE Normalize.

DONE- Implement image augmentation (see notes.txt). Flip horizontally and reverse steering angles.

DONE- Add left and right images with corrected steering angles.

DONE - Use generators to process data on the fly (not store in memory). See notes.txt.

DONE - Implement the model arquitecture of NVIDIA.

10- Add regularization (dropouts).

DONE - Move all the code in the online workspace and be able to run the simulator there (create another git hub repo).

DONE Make sure the training of the model with provided data works correctly, and that the model can be used correctly in the simulator.

The model with pre-data has num samples:
8036 (which involves 8036*3*3 images).

Create a model from the data and identify improvements:
- Record more data in specific scenarios (recovery?).
- Is model underfitting or overfitting?

DONE- Improve the model based on the identified in prior point.

-------------------------

DONE- Record a video with the obtained model in autonomous mode, in the two tracks.

DONE- Start the write up (in a notebook) explaining what has been done so far, the model implemented, the results obtained, drawbacks and what can be improved.
- Provide a summary of the dataset of the first model.
- Is the model underfitting or overfitting?

DONE- Clean code (local and also upload this one to the server).
          Save a model, and be able to reload the model to add new more data for further refinement ( see LabTransferLearning.txt).
            - Save just the best model.

DONE- Record more data. Data collection (see notes.txt).
- Run the simulator with the right specs: 50 HZ, fastest graphic quality, lowest screen resolution, max of 5 epochs.
- Record data track 1 and track 2.
- Record data in reverse order.
- Recovery from left to center, and from right to center.

DONE- Do additional training and write the results obtained from recording more data.
- Provide a summary of the dataset of the new data.

train data_t1_2: this is the run of track 1 in reverse order.
train data_t2_2.

New Training data do not work as expected.

DIJOUS- Check Rubik points if I have completed all the points.

DIJOUS- Finish the write up and other steps to finalize the project.

DIJOUS- Summit the project.

---------------

FOR RESUBMISSION:

load_model("model_path", custom_objects={"tf": tf}). https://github.com/keras-team/keras/issues/5298

resized_input = Lambda(lambda image: tf.image.resize_images(image, (input_size, input_size)))(normal)


*- Add dropout layers and train with the existing data and see if this improves.

First using dropout of 0.5 after each convoluationlay layer and dense function.Num samples 8036, the ones given.

OK- Get more data that train vehicle move from the side to the center.

3- Re-train with the old and new data together.

4- Test and adjust the write up explaining the new additions.

6- Write about information/feedback from the mentors about prior submission and other projects submissions.
